// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Binance.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct TW_Binance_Proto_Transaction {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// int64 SIZE-OF-ENCODED      // varint encoded length of the structure after encoding
  /// 0xF0625DEE                  // prefix
  public var msgs: [Data] = []

  /// array of size 1, containing the standard signature structure of the transaction sender
  public var signatures: [Data] = []

  /// a short sentence of remark for the transaction, only for `Transfer` transactions.
  public var memo: String = String()

  /// an identifier for tools triggerring this transaction, set to zero if unwilling to disclose.
  public var source: Int64 = 0

  /// reserved for future use
  public var data: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct TW_Binance_Proto_Signature {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// public key bytes of the signer address
  public var pubKey: Data = Data()

  /// signature bytes, please check chain access section for signature generation
  public var signature: Data = Data()

  /// another identifier of signer, which can be read from chain by account REST API or RPC
  public var accountNumber: Int64 = 0

  /// sequence number for the next transaction
  public var sequence: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// 0xEB5AE987          // prefix
  /// bytes               // public key bytes
  public struct PubKey {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

public struct TW_Binance_Proto_TradeOrder {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 0xCE6DC043           // prefix
  public var sender: Data = Data()

  /// order id, optional
  public var id: String = String()

  /// symbol for trading pair in full name of the tokens
  public var symbol: String = String()

  /// only accept 2 for now, meaning limit order
  public var ordertype: Int64 = 0

  /// 1 for buy and 2 fory sell
  public var side: Int64 = 0

  /// price of the order, which is the real price multiplied by 1e8 (10^8) and rounded to integer
  public var price: Int64 = 0

  /// quantity of the order, which is the real price multiplied by 1e8 (10^8) and rounded to integer
  public var quantity: Int64 = 0

  /// 1 for Good Till Expire(GTE) order and 3 for Immediate Or Cancel (IOC)
  public var timeinforce: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct TW_Binance_Proto_CancelTradeOrder {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 0x166E681B      // prefix
  public var sender: Data = Data()

  /// symbol for trading pair in full name of the tokens
  public var symbol: String = String()

  /// order id to cancel
  public var refid: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct TW_Binance_Proto_SendOrder {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var inputs: [TW_Binance_Proto_SendOrder.Input] = []

  public var outputs: [TW_Binance_Proto_SendOrder.Output] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// 0x2A2C87FA
  /// A symbol-amount pair.  Could be moved out of SendOrder; kept here for backward compatibility.
  public struct Token {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var denom: String = String()

    public var amount: Int64 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct Input {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var address: Data = Data()

    public var coins: [TW_Binance_Proto_SendOrder.Token] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct Output {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var address: Data = Data()

    public var coins: [TW_Binance_Proto_SendOrder.Token] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

public struct TW_Binance_Proto_TokenIssueOrder {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 0x17EFAB80      // prefix
  public var from: Data = Data()

  /// token name
  public var name: String = String()

  /// token symbol, in full name with "-" suffix
  public var symbol: String = String()

  /// total supply
  public var totalSupply: Int64 = 0

  /// mintable
  public var mintable: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct TW_Binance_Proto_TokenMintOrder {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 0x467E0829      // prefix
  public var from: Data = Data()

  /// token symbol, in full name with "-" suffix
  public var symbol: String = String()

  /// amount to mint
  public var amount: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct TW_Binance_Proto_TokenBurnOrder {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 0x7ED2D2A0      // prefix
  public var from: Data = Data()

  /// token symbol, in full name with "-" suffix
  public var symbol: String = String()

  /// amount to burn
  public var amount: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct TW_Binance_Proto_TokenFreezeOrder {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 0xE774B32D      // prefix
  public var from: Data = Data()

  /// token symbol, in full name with "-" suffix
  public var symbol: String = String()

  /// amount of token to freeze
  public var amount: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct TW_Binance_Proto_TokenUnfreezeOrder {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 0x6515FF0D      // prefix
  public var from: Data = Data()

  /// token symbol, in full name with "-" suffix
  public var symbol: String = String()

  /// amount of token to unfreeze
  public var amount: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct TW_Binance_Proto_HTLTOrder {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 0xB33F9A24      // prefix
  public var from: Data = Data()

  /// recipient address
  public var to: Data = Data()

  public var recipientOtherChain: String = String()

  public var senderOtherChain: String = String()

  ///hash of a random number and timestamp, based on SHA256
  public var randomNumberHash: Data = Data()

  public var timestamp: Int64 = 0

  public var amount: [TW_Binance_Proto_SendOrder.Token] = []

  /// expected gained token on the other chain
  public var expectedIncome: String = String()

  public var heightSpan: Int64 = 0

  public var crossChain: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct TW_Binance_Proto_DepositHTLTOrder {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 0xB33F9A24      // prefix
  public var from: Data = Data()

  public var amount: [TW_Binance_Proto_SendOrder.Token] = []

  public var swapID: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct TW_Binance_Proto_ClaimHTLOrder {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 0xC1665300      // prefix
  public var from: Data = Data()

  public var swapID: Data = Data()

  public var randomNumber: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct TW_Binance_Proto_RefundHTLTOrder {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 0x3454A27C      // prefix
  public var from: Data = Data()

  public var swapID: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct TW_Binance_Proto_TransferOut {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var from: Data = Data()

  public var to: Data = Data()

  public var amount: TW_Binance_Proto_SendOrder.Token {
    get {return _amount ?? TW_Binance_Proto_SendOrder.Token()}
    set {_amount = newValue}
  }
  /// Returns true if `amount` has been explicitly set.
  public var hasAmount: Bool {return self._amount != nil}
  /// Clears the value of `amount`. Subsequent reads from it will return its default value.
  public mutating func clearAmount() {self._amount = nil}

  public var expireTime: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _amount: TW_Binance_Proto_SendOrder.Token? = nil
}

public struct TW_Binance_Proto_SideChainDelegate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var delegatorAddr: Data = Data()

  public var validatorAddr: Data = Data()

  public var delegation: TW_Binance_Proto_SendOrder.Token {
    get {return _delegation ?? TW_Binance_Proto_SendOrder.Token()}
    set {_delegation = newValue}
  }
  /// Returns true if `delegation` has been explicitly set.
  public var hasDelegation: Bool {return self._delegation != nil}
  /// Clears the value of `delegation`. Subsequent reads from it will return its default value.
  public mutating func clearDelegation() {self._delegation = nil}

  public var chainID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _delegation: TW_Binance_Proto_SendOrder.Token? = nil
}

public struct TW_Binance_Proto_SideChainRedelegate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var delegatorAddr: Data = Data()

  public var validatorSrcAddr: Data = Data()

  public var validatorDstAddr: Data = Data()

  public var amount: TW_Binance_Proto_SendOrder.Token {
    get {return _amount ?? TW_Binance_Proto_SendOrder.Token()}
    set {_amount = newValue}
  }
  /// Returns true if `amount` has been explicitly set.
  public var hasAmount: Bool {return self._amount != nil}
  /// Clears the value of `amount`. Subsequent reads from it will return its default value.
  public mutating func clearAmount() {self._amount = nil}

  public var chainID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _amount: TW_Binance_Proto_SendOrder.Token? = nil
}

public struct TW_Binance_Proto_SideChainUndelegate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var delegatorAddr: Data = Data()

  public var validatorAddr: Data = Data()

  public var amount: TW_Binance_Proto_SendOrder.Token {
    get {return _amount ?? TW_Binance_Proto_SendOrder.Token()}
    set {_amount = newValue}
  }
  /// Returns true if `amount` has been explicitly set.
  public var hasAmount: Bool {return self._amount != nil}
  /// Clears the value of `amount`. Subsequent reads from it will return its default value.
  public mutating func clearAmount() {self._amount = nil}

  public var chainID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _amount: TW_Binance_Proto_SendOrder.Token? = nil
}

public struct TW_Binance_Proto_TimeLockOrder {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// owner address
  public var fromAddress: Data = Data()

  public var description_p: String = String()

  /// Array of symbol/amount pairs. see SDK https://github.com/binance-chain/javascript-sdk/blob/master/docs/api-docs/classes/tokenmanagement.md#timelock
  public var amount: [TW_Binance_Proto_SendOrder.Token] = []

  public var lockTime: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct TW_Binance_Proto_TimeRelockOrder {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// owner address
  public var fromAddress: Data = Data()

  /// order ID
  public var id: Int64 = 0

  public var description_p: String = String()

  /// Array of symbol/amount pairs.
  public var amount: [TW_Binance_Proto_SendOrder.Token] = []

  public var lockTime: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct TW_Binance_Proto_TimeUnlockOrder {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// owner address
  public var fromAddress: Data = Data()

  /// order ID
  public var id: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Input data necessary to create a signed order.
public struct TW_Binance_Proto_SigningInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var chainID: String = String()

  public var accountNumber: Int64 = 0

  public var sequence: Int64 = 0

  public var source: Int64 = 0

  public var memo: String = String()

  public var privateKey: Data = Data()

  public var orderOneof: TW_Binance_Proto_SigningInput.OneOf_OrderOneof? = nil

  public var tradeOrder: TW_Binance_Proto_TradeOrder {
    get {
      if case .tradeOrder(let v)? = orderOneof {return v}
      return TW_Binance_Proto_TradeOrder()
    }
    set {orderOneof = .tradeOrder(newValue)}
  }

  public var cancelTradeOrder: TW_Binance_Proto_CancelTradeOrder {
    get {
      if case .cancelTradeOrder(let v)? = orderOneof {return v}
      return TW_Binance_Proto_CancelTradeOrder()
    }
    set {orderOneof = .cancelTradeOrder(newValue)}
  }

  public var sendOrder: TW_Binance_Proto_SendOrder {
    get {
      if case .sendOrder(let v)? = orderOneof {return v}
      return TW_Binance_Proto_SendOrder()
    }
    set {orderOneof = .sendOrder(newValue)}
  }

  public var freezeOrder: TW_Binance_Proto_TokenFreezeOrder {
    get {
      if case .freezeOrder(let v)? = orderOneof {return v}
      return TW_Binance_Proto_TokenFreezeOrder()
    }
    set {orderOneof = .freezeOrder(newValue)}
  }

  public var unfreezeOrder: TW_Binance_Proto_TokenUnfreezeOrder {
    get {
      if case .unfreezeOrder(let v)? = orderOneof {return v}
      return TW_Binance_Proto_TokenUnfreezeOrder()
    }
    set {orderOneof = .unfreezeOrder(newValue)}
  }

  public var htltOrder: TW_Binance_Proto_HTLTOrder {
    get {
      if case .htltOrder(let v)? = orderOneof {return v}
      return TW_Binance_Proto_HTLTOrder()
    }
    set {orderOneof = .htltOrder(newValue)}
  }

  public var depositHtltOrder: TW_Binance_Proto_DepositHTLTOrder {
    get {
      if case .depositHtltOrder(let v)? = orderOneof {return v}
      return TW_Binance_Proto_DepositHTLTOrder()
    }
    set {orderOneof = .depositHtltOrder(newValue)}
  }

  public var claimHtltOrder: TW_Binance_Proto_ClaimHTLOrder {
    get {
      if case .claimHtltOrder(let v)? = orderOneof {return v}
      return TW_Binance_Proto_ClaimHTLOrder()
    }
    set {orderOneof = .claimHtltOrder(newValue)}
  }

  public var refundHtltOrder: TW_Binance_Proto_RefundHTLTOrder {
    get {
      if case .refundHtltOrder(let v)? = orderOneof {return v}
      return TW_Binance_Proto_RefundHTLTOrder()
    }
    set {orderOneof = .refundHtltOrder(newValue)}
  }

  public var issueOrder: TW_Binance_Proto_TokenIssueOrder {
    get {
      if case .issueOrder(let v)? = orderOneof {return v}
      return TW_Binance_Proto_TokenIssueOrder()
    }
    set {orderOneof = .issueOrder(newValue)}
  }

  public var mintOrder: TW_Binance_Proto_TokenMintOrder {
    get {
      if case .mintOrder(let v)? = orderOneof {return v}
      return TW_Binance_Proto_TokenMintOrder()
    }
    set {orderOneof = .mintOrder(newValue)}
  }

  public var burnOrder: TW_Binance_Proto_TokenBurnOrder {
    get {
      if case .burnOrder(let v)? = orderOneof {return v}
      return TW_Binance_Proto_TokenBurnOrder()
    }
    set {orderOneof = .burnOrder(newValue)}
  }

  public var transferOutOrder: TW_Binance_Proto_TransferOut {
    get {
      if case .transferOutOrder(let v)? = orderOneof {return v}
      return TW_Binance_Proto_TransferOut()
    }
    set {orderOneof = .transferOutOrder(newValue)}
  }

  public var sideDelegateOrder: TW_Binance_Proto_SideChainDelegate {
    get {
      if case .sideDelegateOrder(let v)? = orderOneof {return v}
      return TW_Binance_Proto_SideChainDelegate()
    }
    set {orderOneof = .sideDelegateOrder(newValue)}
  }

  public var sideRedelegateOrder: TW_Binance_Proto_SideChainRedelegate {
    get {
      if case .sideRedelegateOrder(let v)? = orderOneof {return v}
      return TW_Binance_Proto_SideChainRedelegate()
    }
    set {orderOneof = .sideRedelegateOrder(newValue)}
  }

  public var sideUndelegateOrder: TW_Binance_Proto_SideChainUndelegate {
    get {
      if case .sideUndelegateOrder(let v)? = orderOneof {return v}
      return TW_Binance_Proto_SideChainUndelegate()
    }
    set {orderOneof = .sideUndelegateOrder(newValue)}
  }

  public var timeLockOrder: TW_Binance_Proto_TimeLockOrder {
    get {
      if case .timeLockOrder(let v)? = orderOneof {return v}
      return TW_Binance_Proto_TimeLockOrder()
    }
    set {orderOneof = .timeLockOrder(newValue)}
  }

  public var timeRelockOrder: TW_Binance_Proto_TimeRelockOrder {
    get {
      if case .timeRelockOrder(let v)? = orderOneof {return v}
      return TW_Binance_Proto_TimeRelockOrder()
    }
    set {orderOneof = .timeRelockOrder(newValue)}
  }

  public var timeUnlockOrder: TW_Binance_Proto_TimeUnlockOrder {
    get {
      if case .timeUnlockOrder(let v)? = orderOneof {return v}
      return TW_Binance_Proto_TimeUnlockOrder()
    }
    set {orderOneof = .timeUnlockOrder(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_OrderOneof: Equatable {
    case tradeOrder(TW_Binance_Proto_TradeOrder)
    case cancelTradeOrder(TW_Binance_Proto_CancelTradeOrder)
    case sendOrder(TW_Binance_Proto_SendOrder)
    case freezeOrder(TW_Binance_Proto_TokenFreezeOrder)
    case unfreezeOrder(TW_Binance_Proto_TokenUnfreezeOrder)
    case htltOrder(TW_Binance_Proto_HTLTOrder)
    case depositHtltOrder(TW_Binance_Proto_DepositHTLTOrder)
    case claimHtltOrder(TW_Binance_Proto_ClaimHTLOrder)
    case refundHtltOrder(TW_Binance_Proto_RefundHTLTOrder)
    case issueOrder(TW_Binance_Proto_TokenIssueOrder)
    case mintOrder(TW_Binance_Proto_TokenMintOrder)
    case burnOrder(TW_Binance_Proto_TokenBurnOrder)
    case transferOutOrder(TW_Binance_Proto_TransferOut)
    case sideDelegateOrder(TW_Binance_Proto_SideChainDelegate)
    case sideRedelegateOrder(TW_Binance_Proto_SideChainRedelegate)
    case sideUndelegateOrder(TW_Binance_Proto_SideChainUndelegate)
    case timeLockOrder(TW_Binance_Proto_TimeLockOrder)
    case timeRelockOrder(TW_Binance_Proto_TimeRelockOrder)
    case timeUnlockOrder(TW_Binance_Proto_TimeUnlockOrder)

  #if !swift(>=4.1)
    public static func ==(lhs: TW_Binance_Proto_SigningInput.OneOf_OrderOneof, rhs: TW_Binance_Proto_SigningInput.OneOf_OrderOneof) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.tradeOrder, .tradeOrder): return {
        guard case .tradeOrder(let l) = lhs, case .tradeOrder(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.cancelTradeOrder, .cancelTradeOrder): return {
        guard case .cancelTradeOrder(let l) = lhs, case .cancelTradeOrder(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.sendOrder, .sendOrder): return {
        guard case .sendOrder(let l) = lhs, case .sendOrder(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.freezeOrder, .freezeOrder): return {
        guard case .freezeOrder(let l) = lhs, case .freezeOrder(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.unfreezeOrder, .unfreezeOrder): return {
        guard case .unfreezeOrder(let l) = lhs, case .unfreezeOrder(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.htltOrder, .htltOrder): return {
        guard case .htltOrder(let l) = lhs, case .htltOrder(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.depositHtltOrder, .depositHtltOrder): return {
        guard case .depositHtltOrder(let l) = lhs, case .depositHtltOrder(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.claimHtltOrder, .claimHtltOrder): return {
        guard case .claimHtltOrder(let l) = lhs, case .claimHtltOrder(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.refundHtltOrder, .refundHtltOrder): return {
        guard case .refundHtltOrder(let l) = lhs, case .refundHtltOrder(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.issueOrder, .issueOrder): return {
        guard case .issueOrder(let l) = lhs, case .issueOrder(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.mintOrder, .mintOrder): return {
        guard case .mintOrder(let l) = lhs, case .mintOrder(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.burnOrder, .burnOrder): return {
        guard case .burnOrder(let l) = lhs, case .burnOrder(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.transferOutOrder, .transferOutOrder): return {
        guard case .transferOutOrder(let l) = lhs, case .transferOutOrder(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.sideDelegateOrder, .sideDelegateOrder): return {
        guard case .sideDelegateOrder(let l) = lhs, case .sideDelegateOrder(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.sideRedelegateOrder, .sideRedelegateOrder): return {
        guard case .sideRedelegateOrder(let l) = lhs, case .sideRedelegateOrder(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.sideUndelegateOrder, .sideUndelegateOrder): return {
        guard case .sideUndelegateOrder(let l) = lhs, case .sideUndelegateOrder(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.timeLockOrder, .timeLockOrder): return {
        guard case .timeLockOrder(let l) = lhs, case .timeLockOrder(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.timeRelockOrder, .timeRelockOrder): return {
        guard case .timeRelockOrder(let l) = lhs, case .timeRelockOrder(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.timeUnlockOrder, .timeUnlockOrder): return {
        guard case .timeUnlockOrder(let l) = lhs, case .timeUnlockOrder(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

/// Transaction signing output.
public struct TW_Binance_Proto_SigningOutput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Signed and encoded transaction bytes.
  public var encoded: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "TW.Binance.Proto"

extension TW_Binance_Proto_Transaction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Transaction"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "msgs"),
    2: .same(proto: "signatures"),
    3: .same(proto: "memo"),
    4: .same(proto: "source"),
    5: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedBytesField(value: &self.msgs) }()
      case 2: try { try decoder.decodeRepeatedBytesField(value: &self.signatures) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.memo) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.source) }()
      case 5: try { try decoder.decodeSingularBytesField(value: &self.data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.msgs.isEmpty {
      try visitor.visitRepeatedBytesField(value: self.msgs, fieldNumber: 1)
    }
    if !self.signatures.isEmpty {
      try visitor.visitRepeatedBytesField(value: self.signatures, fieldNumber: 2)
    }
    if !self.memo.isEmpty {
      try visitor.visitSingularStringField(value: self.memo, fieldNumber: 3)
    }
    if self.source != 0 {
      try visitor.visitSingularInt64Field(value: self.source, fieldNumber: 4)
    }
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Binance_Proto_Transaction, rhs: TW_Binance_Proto_Transaction) -> Bool {
    if lhs.msgs != rhs.msgs {return false}
    if lhs.signatures != rhs.signatures {return false}
    if lhs.memo != rhs.memo {return false}
    if lhs.source != rhs.source {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Binance_Proto_Signature: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Signature"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pub_key"),
    2: .same(proto: "signature"),
    3: .standard(proto: "account_number"),
    4: .same(proto: "sequence"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.pubKey) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.signature) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.accountNumber) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.sequence) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.pubKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.pubKey, fieldNumber: 1)
    }
    if !self.signature.isEmpty {
      try visitor.visitSingularBytesField(value: self.signature, fieldNumber: 2)
    }
    if self.accountNumber != 0 {
      try visitor.visitSingularInt64Field(value: self.accountNumber, fieldNumber: 3)
    }
    if self.sequence != 0 {
      try visitor.visitSingularInt64Field(value: self.sequence, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Binance_Proto_Signature, rhs: TW_Binance_Proto_Signature) -> Bool {
    if lhs.pubKey != rhs.pubKey {return false}
    if lhs.signature != rhs.signature {return false}
    if lhs.accountNumber != rhs.accountNumber {return false}
    if lhs.sequence != rhs.sequence {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Binance_Proto_Signature.PubKey: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_Binance_Proto_Signature.protoMessageName + ".PubKey"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Binance_Proto_Signature.PubKey, rhs: TW_Binance_Proto_Signature.PubKey) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Binance_Proto_TradeOrder: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TradeOrder"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sender"),
    2: .same(proto: "id"),
    3: .same(proto: "symbol"),
    4: .same(proto: "ordertype"),
    5: .same(proto: "side"),
    6: .same(proto: "price"),
    7: .same(proto: "quantity"),
    8: .same(proto: "timeinforce"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.sender) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.symbol) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.ordertype) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.side) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.price) }()
      case 7: try { try decoder.decodeSingularInt64Field(value: &self.quantity) }()
      case 8: try { try decoder.decodeSingularInt64Field(value: &self.timeinforce) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sender.isEmpty {
      try visitor.visitSingularBytesField(value: self.sender, fieldNumber: 1)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 2)
    }
    if !self.symbol.isEmpty {
      try visitor.visitSingularStringField(value: self.symbol, fieldNumber: 3)
    }
    if self.ordertype != 0 {
      try visitor.visitSingularInt64Field(value: self.ordertype, fieldNumber: 4)
    }
    if self.side != 0 {
      try visitor.visitSingularInt64Field(value: self.side, fieldNumber: 5)
    }
    if self.price != 0 {
      try visitor.visitSingularInt64Field(value: self.price, fieldNumber: 6)
    }
    if self.quantity != 0 {
      try visitor.visitSingularInt64Field(value: self.quantity, fieldNumber: 7)
    }
    if self.timeinforce != 0 {
      try visitor.visitSingularInt64Field(value: self.timeinforce, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Binance_Proto_TradeOrder, rhs: TW_Binance_Proto_TradeOrder) -> Bool {
    if lhs.sender != rhs.sender {return false}
    if lhs.id != rhs.id {return false}
    if lhs.symbol != rhs.symbol {return false}
    if lhs.ordertype != rhs.ordertype {return false}
    if lhs.side != rhs.side {return false}
    if lhs.price != rhs.price {return false}
    if lhs.quantity != rhs.quantity {return false}
    if lhs.timeinforce != rhs.timeinforce {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Binance_Proto_CancelTradeOrder: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CancelTradeOrder"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sender"),
    2: .same(proto: "symbol"),
    3: .same(proto: "refid"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.sender) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.symbol) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.refid) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sender.isEmpty {
      try visitor.visitSingularBytesField(value: self.sender, fieldNumber: 1)
    }
    if !self.symbol.isEmpty {
      try visitor.visitSingularStringField(value: self.symbol, fieldNumber: 2)
    }
    if !self.refid.isEmpty {
      try visitor.visitSingularStringField(value: self.refid, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Binance_Proto_CancelTradeOrder, rhs: TW_Binance_Proto_CancelTradeOrder) -> Bool {
    if lhs.sender != rhs.sender {return false}
    if lhs.symbol != rhs.symbol {return false}
    if lhs.refid != rhs.refid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Binance_Proto_SendOrder: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SendOrder"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "inputs"),
    2: .same(proto: "outputs"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.inputs) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.outputs) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.inputs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.inputs, fieldNumber: 1)
    }
    if !self.outputs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.outputs, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Binance_Proto_SendOrder, rhs: TW_Binance_Proto_SendOrder) -> Bool {
    if lhs.inputs != rhs.inputs {return false}
    if lhs.outputs != rhs.outputs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Binance_Proto_SendOrder.Token: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_Binance_Proto_SendOrder.protoMessageName + ".Token"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "denom"),
    2: .same(proto: "amount"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.denom) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.amount) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.denom.isEmpty {
      try visitor.visitSingularStringField(value: self.denom, fieldNumber: 1)
    }
    if self.amount != 0 {
      try visitor.visitSingularInt64Field(value: self.amount, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Binance_Proto_SendOrder.Token, rhs: TW_Binance_Proto_SendOrder.Token) -> Bool {
    if lhs.denom != rhs.denom {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Binance_Proto_SendOrder.Input: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_Binance_Proto_SendOrder.protoMessageName + ".Input"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
    2: .same(proto: "coins"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.address) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.coins) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.address.isEmpty {
      try visitor.visitSingularBytesField(value: self.address, fieldNumber: 1)
    }
    if !self.coins.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.coins, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Binance_Proto_SendOrder.Input, rhs: TW_Binance_Proto_SendOrder.Input) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs.coins != rhs.coins {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Binance_Proto_SendOrder.Output: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_Binance_Proto_SendOrder.protoMessageName + ".Output"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
    2: .same(proto: "coins"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.address) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.coins) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.address.isEmpty {
      try visitor.visitSingularBytesField(value: self.address, fieldNumber: 1)
    }
    if !self.coins.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.coins, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Binance_Proto_SendOrder.Output, rhs: TW_Binance_Proto_SendOrder.Output) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs.coins != rhs.coins {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Binance_Proto_TokenIssueOrder: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TokenIssueOrder"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "from"),
    2: .same(proto: "name"),
    3: .same(proto: "symbol"),
    4: .standard(proto: "total_supply"),
    5: .same(proto: "mintable"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.from) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.symbol) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.totalSupply) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.mintable) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.from.isEmpty {
      try visitor.visitSingularBytesField(value: self.from, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.symbol.isEmpty {
      try visitor.visitSingularStringField(value: self.symbol, fieldNumber: 3)
    }
    if self.totalSupply != 0 {
      try visitor.visitSingularInt64Field(value: self.totalSupply, fieldNumber: 4)
    }
    if self.mintable != false {
      try visitor.visitSingularBoolField(value: self.mintable, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Binance_Proto_TokenIssueOrder, rhs: TW_Binance_Proto_TokenIssueOrder) -> Bool {
    if lhs.from != rhs.from {return false}
    if lhs.name != rhs.name {return false}
    if lhs.symbol != rhs.symbol {return false}
    if lhs.totalSupply != rhs.totalSupply {return false}
    if lhs.mintable != rhs.mintable {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Binance_Proto_TokenMintOrder: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TokenMintOrder"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "from"),
    2: .same(proto: "symbol"),
    3: .same(proto: "amount"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.from) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.symbol) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.amount) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.from.isEmpty {
      try visitor.visitSingularBytesField(value: self.from, fieldNumber: 1)
    }
    if !self.symbol.isEmpty {
      try visitor.visitSingularStringField(value: self.symbol, fieldNumber: 2)
    }
    if self.amount != 0 {
      try visitor.visitSingularInt64Field(value: self.amount, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Binance_Proto_TokenMintOrder, rhs: TW_Binance_Proto_TokenMintOrder) -> Bool {
    if lhs.from != rhs.from {return false}
    if lhs.symbol != rhs.symbol {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Binance_Proto_TokenBurnOrder: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TokenBurnOrder"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "from"),
    2: .same(proto: "symbol"),
    3: .same(proto: "amount"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.from) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.symbol) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.amount) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.from.isEmpty {
      try visitor.visitSingularBytesField(value: self.from, fieldNumber: 1)
    }
    if !self.symbol.isEmpty {
      try visitor.visitSingularStringField(value: self.symbol, fieldNumber: 2)
    }
    if self.amount != 0 {
      try visitor.visitSingularInt64Field(value: self.amount, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Binance_Proto_TokenBurnOrder, rhs: TW_Binance_Proto_TokenBurnOrder) -> Bool {
    if lhs.from != rhs.from {return false}
    if lhs.symbol != rhs.symbol {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Binance_Proto_TokenFreezeOrder: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TokenFreezeOrder"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "from"),
    2: .same(proto: "symbol"),
    3: .same(proto: "amount"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.from) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.symbol) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.amount) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.from.isEmpty {
      try visitor.visitSingularBytesField(value: self.from, fieldNumber: 1)
    }
    if !self.symbol.isEmpty {
      try visitor.visitSingularStringField(value: self.symbol, fieldNumber: 2)
    }
    if self.amount != 0 {
      try visitor.visitSingularInt64Field(value: self.amount, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Binance_Proto_TokenFreezeOrder, rhs: TW_Binance_Proto_TokenFreezeOrder) -> Bool {
    if lhs.from != rhs.from {return false}
    if lhs.symbol != rhs.symbol {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Binance_Proto_TokenUnfreezeOrder: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TokenUnfreezeOrder"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "from"),
    2: .same(proto: "symbol"),
    3: .same(proto: "amount"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.from) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.symbol) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.amount) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.from.isEmpty {
      try visitor.visitSingularBytesField(value: self.from, fieldNumber: 1)
    }
    if !self.symbol.isEmpty {
      try visitor.visitSingularStringField(value: self.symbol, fieldNumber: 2)
    }
    if self.amount != 0 {
      try visitor.visitSingularInt64Field(value: self.amount, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Binance_Proto_TokenUnfreezeOrder, rhs: TW_Binance_Proto_TokenUnfreezeOrder) -> Bool {
    if lhs.from != rhs.from {return false}
    if lhs.symbol != rhs.symbol {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Binance_Proto_HTLTOrder: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".HTLTOrder"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "from"),
    2: .same(proto: "to"),
    3: .standard(proto: "recipient_other_chain"),
    4: .standard(proto: "sender_other_chain"),
    5: .standard(proto: "random_number_hash"),
    6: .same(proto: "timestamp"),
    7: .same(proto: "amount"),
    8: .standard(proto: "expected_income"),
    9: .standard(proto: "height_span"),
    10: .standard(proto: "cross_chain"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.from) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.to) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.recipientOtherChain) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.senderOtherChain) }()
      case 5: try { try decoder.decodeSingularBytesField(value: &self.randomNumberHash) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.timestamp) }()
      case 7: try { try decoder.decodeRepeatedMessageField(value: &self.amount) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.expectedIncome) }()
      case 9: try { try decoder.decodeSingularInt64Field(value: &self.heightSpan) }()
      case 10: try { try decoder.decodeSingularBoolField(value: &self.crossChain) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.from.isEmpty {
      try visitor.visitSingularBytesField(value: self.from, fieldNumber: 1)
    }
    if !self.to.isEmpty {
      try visitor.visitSingularBytesField(value: self.to, fieldNumber: 2)
    }
    if !self.recipientOtherChain.isEmpty {
      try visitor.visitSingularStringField(value: self.recipientOtherChain, fieldNumber: 3)
    }
    if !self.senderOtherChain.isEmpty {
      try visitor.visitSingularStringField(value: self.senderOtherChain, fieldNumber: 4)
    }
    if !self.randomNumberHash.isEmpty {
      try visitor.visitSingularBytesField(value: self.randomNumberHash, fieldNumber: 5)
    }
    if self.timestamp != 0 {
      try visitor.visitSingularInt64Field(value: self.timestamp, fieldNumber: 6)
    }
    if !self.amount.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.amount, fieldNumber: 7)
    }
    if !self.expectedIncome.isEmpty {
      try visitor.visitSingularStringField(value: self.expectedIncome, fieldNumber: 8)
    }
    if self.heightSpan != 0 {
      try visitor.visitSingularInt64Field(value: self.heightSpan, fieldNumber: 9)
    }
    if self.crossChain != false {
      try visitor.visitSingularBoolField(value: self.crossChain, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Binance_Proto_HTLTOrder, rhs: TW_Binance_Proto_HTLTOrder) -> Bool {
    if lhs.from != rhs.from {return false}
    if lhs.to != rhs.to {return false}
    if lhs.recipientOtherChain != rhs.recipientOtherChain {return false}
    if lhs.senderOtherChain != rhs.senderOtherChain {return false}
    if lhs.randomNumberHash != rhs.randomNumberHash {return false}
    if lhs.timestamp != rhs.timestamp {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.expectedIncome != rhs.expectedIncome {return false}
    if lhs.heightSpan != rhs.heightSpan {return false}
    if lhs.crossChain != rhs.crossChain {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Binance_Proto_DepositHTLTOrder: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DepositHTLTOrder"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "from"),
    2: .same(proto: "amount"),
    3: .standard(proto: "swap_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.from) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.amount) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.swapID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.from.isEmpty {
      try visitor.visitSingularBytesField(value: self.from, fieldNumber: 1)
    }
    if !self.amount.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.amount, fieldNumber: 2)
    }
    if !self.swapID.isEmpty {
      try visitor.visitSingularBytesField(value: self.swapID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Binance_Proto_DepositHTLTOrder, rhs: TW_Binance_Proto_DepositHTLTOrder) -> Bool {
    if lhs.from != rhs.from {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.swapID != rhs.swapID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Binance_Proto_ClaimHTLOrder: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ClaimHTLOrder"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "from"),
    2: .standard(proto: "swap_id"),
    3: .standard(proto: "random_number"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.from) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.swapID) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.randomNumber) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.from.isEmpty {
      try visitor.visitSingularBytesField(value: self.from, fieldNumber: 1)
    }
    if !self.swapID.isEmpty {
      try visitor.visitSingularBytesField(value: self.swapID, fieldNumber: 2)
    }
    if !self.randomNumber.isEmpty {
      try visitor.visitSingularBytesField(value: self.randomNumber, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Binance_Proto_ClaimHTLOrder, rhs: TW_Binance_Proto_ClaimHTLOrder) -> Bool {
    if lhs.from != rhs.from {return false}
    if lhs.swapID != rhs.swapID {return false}
    if lhs.randomNumber != rhs.randomNumber {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Binance_Proto_RefundHTLTOrder: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RefundHTLTOrder"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "from"),
    2: .standard(proto: "swap_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.from) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.swapID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.from.isEmpty {
      try visitor.visitSingularBytesField(value: self.from, fieldNumber: 1)
    }
    if !self.swapID.isEmpty {
      try visitor.visitSingularBytesField(value: self.swapID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Binance_Proto_RefundHTLTOrder, rhs: TW_Binance_Proto_RefundHTLTOrder) -> Bool {
    if lhs.from != rhs.from {return false}
    if lhs.swapID != rhs.swapID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Binance_Proto_TransferOut: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TransferOut"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "from"),
    2: .same(proto: "to"),
    3: .same(proto: "amount"),
    4: .standard(proto: "expire_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.from) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.to) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._amount) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.expireTime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.from.isEmpty {
      try visitor.visitSingularBytesField(value: self.from, fieldNumber: 1)
    }
    if !self.to.isEmpty {
      try visitor.visitSingularBytesField(value: self.to, fieldNumber: 2)
    }
    if let v = self._amount {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if self.expireTime != 0 {
      try visitor.visitSingularInt64Field(value: self.expireTime, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Binance_Proto_TransferOut, rhs: TW_Binance_Proto_TransferOut) -> Bool {
    if lhs.from != rhs.from {return false}
    if lhs.to != rhs.to {return false}
    if lhs._amount != rhs._amount {return false}
    if lhs.expireTime != rhs.expireTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Binance_Proto_SideChainDelegate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SideChainDelegate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "delegator_addr"),
    2: .standard(proto: "validator_addr"),
    3: .same(proto: "delegation"),
    4: .standard(proto: "chain_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.delegatorAddr) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.validatorAddr) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._delegation) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.chainID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.delegatorAddr.isEmpty {
      try visitor.visitSingularBytesField(value: self.delegatorAddr, fieldNumber: 1)
    }
    if !self.validatorAddr.isEmpty {
      try visitor.visitSingularBytesField(value: self.validatorAddr, fieldNumber: 2)
    }
    if let v = self._delegation {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.chainID.isEmpty {
      try visitor.visitSingularStringField(value: self.chainID, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Binance_Proto_SideChainDelegate, rhs: TW_Binance_Proto_SideChainDelegate) -> Bool {
    if lhs.delegatorAddr != rhs.delegatorAddr {return false}
    if lhs.validatorAddr != rhs.validatorAddr {return false}
    if lhs._delegation != rhs._delegation {return false}
    if lhs.chainID != rhs.chainID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Binance_Proto_SideChainRedelegate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SideChainRedelegate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "delegator_addr"),
    2: .standard(proto: "validator_src_addr"),
    3: .standard(proto: "validator_dst_addr"),
    4: .same(proto: "amount"),
    5: .standard(proto: "chain_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.delegatorAddr) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.validatorSrcAddr) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.validatorDstAddr) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._amount) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.chainID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.delegatorAddr.isEmpty {
      try visitor.visitSingularBytesField(value: self.delegatorAddr, fieldNumber: 1)
    }
    if !self.validatorSrcAddr.isEmpty {
      try visitor.visitSingularBytesField(value: self.validatorSrcAddr, fieldNumber: 2)
    }
    if !self.validatorDstAddr.isEmpty {
      try visitor.visitSingularBytesField(value: self.validatorDstAddr, fieldNumber: 3)
    }
    if let v = self._amount {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if !self.chainID.isEmpty {
      try visitor.visitSingularStringField(value: self.chainID, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Binance_Proto_SideChainRedelegate, rhs: TW_Binance_Proto_SideChainRedelegate) -> Bool {
    if lhs.delegatorAddr != rhs.delegatorAddr {return false}
    if lhs.validatorSrcAddr != rhs.validatorSrcAddr {return false}
    if lhs.validatorDstAddr != rhs.validatorDstAddr {return false}
    if lhs._amount != rhs._amount {return false}
    if lhs.chainID != rhs.chainID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Binance_Proto_SideChainUndelegate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SideChainUndelegate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "delegator_addr"),
    2: .standard(proto: "validator_addr"),
    3: .same(proto: "amount"),
    4: .standard(proto: "chain_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.delegatorAddr) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.validatorAddr) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._amount) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.chainID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.delegatorAddr.isEmpty {
      try visitor.visitSingularBytesField(value: self.delegatorAddr, fieldNumber: 1)
    }
    if !self.validatorAddr.isEmpty {
      try visitor.visitSingularBytesField(value: self.validatorAddr, fieldNumber: 2)
    }
    if let v = self._amount {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.chainID.isEmpty {
      try visitor.visitSingularStringField(value: self.chainID, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Binance_Proto_SideChainUndelegate, rhs: TW_Binance_Proto_SideChainUndelegate) -> Bool {
    if lhs.delegatorAddr != rhs.delegatorAddr {return false}
    if lhs.validatorAddr != rhs.validatorAddr {return false}
    if lhs._amount != rhs._amount {return false}
    if lhs.chainID != rhs.chainID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Binance_Proto_TimeLockOrder: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TimeLockOrder"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "from_address"),
    2: .same(proto: "description"),
    3: .same(proto: "amount"),
    4: .standard(proto: "lock_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.fromAddress) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.amount) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.lockTime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.fromAddress.isEmpty {
      try visitor.visitSingularBytesField(value: self.fromAddress, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if !self.amount.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.amount, fieldNumber: 3)
    }
    if self.lockTime != 0 {
      try visitor.visitSingularInt64Field(value: self.lockTime, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Binance_Proto_TimeLockOrder, rhs: TW_Binance_Proto_TimeLockOrder) -> Bool {
    if lhs.fromAddress != rhs.fromAddress {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.lockTime != rhs.lockTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Binance_Proto_TimeRelockOrder: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TimeRelockOrder"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "from_address"),
    2: .same(proto: "id"),
    3: .same(proto: "description"),
    4: .same(proto: "amount"),
    5: .standard(proto: "lock_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.fromAddress) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.id) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.amount) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.lockTime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.fromAddress.isEmpty {
      try visitor.visitSingularBytesField(value: self.fromAddress, fieldNumber: 1)
    }
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 2)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 3)
    }
    if !self.amount.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.amount, fieldNumber: 4)
    }
    if self.lockTime != 0 {
      try visitor.visitSingularInt64Field(value: self.lockTime, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Binance_Proto_TimeRelockOrder, rhs: TW_Binance_Proto_TimeRelockOrder) -> Bool {
    if lhs.fromAddress != rhs.fromAddress {return false}
    if lhs.id != rhs.id {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.lockTime != rhs.lockTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Binance_Proto_TimeUnlockOrder: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TimeUnlockOrder"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "from_address"),
    2: .same(proto: "id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.fromAddress) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.id) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.fromAddress.isEmpty {
      try visitor.visitSingularBytesField(value: self.fromAddress, fieldNumber: 1)
    }
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Binance_Proto_TimeUnlockOrder, rhs: TW_Binance_Proto_TimeUnlockOrder) -> Bool {
    if lhs.fromAddress != rhs.fromAddress {return false}
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Binance_Proto_SigningInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SigningInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "chain_id"),
    2: .standard(proto: "account_number"),
    3: .same(proto: "sequence"),
    4: .same(proto: "source"),
    5: .same(proto: "memo"),
    6: .standard(proto: "private_key"),
    8: .standard(proto: "trade_order"),
    9: .standard(proto: "cancel_trade_order"),
    10: .standard(proto: "send_order"),
    11: .standard(proto: "freeze_order"),
    12: .standard(proto: "unfreeze_order"),
    13: .standard(proto: "htlt_order"),
    14: .standard(proto: "depositHTLT_order"),
    15: .standard(proto: "claimHTLT_order"),
    16: .standard(proto: "refundHTLT_order"),
    17: .standard(proto: "issue_order"),
    18: .standard(proto: "mint_order"),
    19: .standard(proto: "burn_order"),
    20: .standard(proto: "transfer_out_order"),
    21: .standard(proto: "side_delegate_order"),
    22: .standard(proto: "side_redelegate_order"),
    23: .standard(proto: "side_undelegate_order"),
    24: .standard(proto: "time_lock_order"),
    25: .standard(proto: "time_relock_order"),
    26: .standard(proto: "time_unlock_order"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.chainID) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.accountNumber) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.sequence) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.source) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.memo) }()
      case 6: try { try decoder.decodeSingularBytesField(value: &self.privateKey) }()
      case 8: try {
        var v: TW_Binance_Proto_TradeOrder?
        if let current = self.orderOneof {
          try decoder.handleConflictingOneOf()
          if case .tradeOrder(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.orderOneof = .tradeOrder(v)}
      }()
      case 9: try {
        var v: TW_Binance_Proto_CancelTradeOrder?
        if let current = self.orderOneof {
          try decoder.handleConflictingOneOf()
          if case .cancelTradeOrder(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.orderOneof = .cancelTradeOrder(v)}
      }()
      case 10: try {
        var v: TW_Binance_Proto_SendOrder?
        if let current = self.orderOneof {
          try decoder.handleConflictingOneOf()
          if case .sendOrder(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.orderOneof = .sendOrder(v)}
      }()
      case 11: try {
        var v: TW_Binance_Proto_TokenFreezeOrder?
        if let current = self.orderOneof {
          try decoder.handleConflictingOneOf()
          if case .freezeOrder(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.orderOneof = .freezeOrder(v)}
      }()
      case 12: try {
        var v: TW_Binance_Proto_TokenUnfreezeOrder?
        if let current = self.orderOneof {
          try decoder.handleConflictingOneOf()
          if case .unfreezeOrder(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.orderOneof = .unfreezeOrder(v)}
      }()
      case 13: try {
        var v: TW_Binance_Proto_HTLTOrder?
        if let current = self.orderOneof {
          try decoder.handleConflictingOneOf()
          if case .htltOrder(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.orderOneof = .htltOrder(v)}
      }()
      case 14: try {
        var v: TW_Binance_Proto_DepositHTLTOrder?
        if let current = self.orderOneof {
          try decoder.handleConflictingOneOf()
          if case .depositHtltOrder(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.orderOneof = .depositHtltOrder(v)}
      }()
      case 15: try {
        var v: TW_Binance_Proto_ClaimHTLOrder?
        if let current = self.orderOneof {
          try decoder.handleConflictingOneOf()
          if case .claimHtltOrder(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.orderOneof = .claimHtltOrder(v)}
      }()
      case 16: try {
        var v: TW_Binance_Proto_RefundHTLTOrder?
        if let current = self.orderOneof {
          try decoder.handleConflictingOneOf()
          if case .refundHtltOrder(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.orderOneof = .refundHtltOrder(v)}
      }()
      case 17: try {
        var v: TW_Binance_Proto_TokenIssueOrder?
        if let current = self.orderOneof {
          try decoder.handleConflictingOneOf()
          if case .issueOrder(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.orderOneof = .issueOrder(v)}
      }()
      case 18: try {
        var v: TW_Binance_Proto_TokenMintOrder?
        if let current = self.orderOneof {
          try decoder.handleConflictingOneOf()
          if case .mintOrder(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.orderOneof = .mintOrder(v)}
      }()
      case 19: try {
        var v: TW_Binance_Proto_TokenBurnOrder?
        if let current = self.orderOneof {
          try decoder.handleConflictingOneOf()
          if case .burnOrder(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.orderOneof = .burnOrder(v)}
      }()
      case 20: try {
        var v: TW_Binance_Proto_TransferOut?
        if let current = self.orderOneof {
          try decoder.handleConflictingOneOf()
          if case .transferOutOrder(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.orderOneof = .transferOutOrder(v)}
      }()
      case 21: try {
        var v: TW_Binance_Proto_SideChainDelegate?
        if let current = self.orderOneof {
          try decoder.handleConflictingOneOf()
          if case .sideDelegateOrder(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.orderOneof = .sideDelegateOrder(v)}
      }()
      case 22: try {
        var v: TW_Binance_Proto_SideChainRedelegate?
        if let current = self.orderOneof {
          try decoder.handleConflictingOneOf()
          if case .sideRedelegateOrder(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.orderOneof = .sideRedelegateOrder(v)}
      }()
      case 23: try {
        var v: TW_Binance_Proto_SideChainUndelegate?
        if let current = self.orderOneof {
          try decoder.handleConflictingOneOf()
          if case .sideUndelegateOrder(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.orderOneof = .sideUndelegateOrder(v)}
      }()
      case 24: try {
        var v: TW_Binance_Proto_TimeLockOrder?
        if let current = self.orderOneof {
          try decoder.handleConflictingOneOf()
          if case .timeLockOrder(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.orderOneof = .timeLockOrder(v)}
      }()
      case 25: try {
        var v: TW_Binance_Proto_TimeRelockOrder?
        if let current = self.orderOneof {
          try decoder.handleConflictingOneOf()
          if case .timeRelockOrder(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.orderOneof = .timeRelockOrder(v)}
      }()
      case 26: try {
        var v: TW_Binance_Proto_TimeUnlockOrder?
        if let current = self.orderOneof {
          try decoder.handleConflictingOneOf()
          if case .timeUnlockOrder(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.orderOneof = .timeUnlockOrder(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.chainID.isEmpty {
      try visitor.visitSingularStringField(value: self.chainID, fieldNumber: 1)
    }
    if self.accountNumber != 0 {
      try visitor.visitSingularInt64Field(value: self.accountNumber, fieldNumber: 2)
    }
    if self.sequence != 0 {
      try visitor.visitSingularInt64Field(value: self.sequence, fieldNumber: 3)
    }
    if self.source != 0 {
      try visitor.visitSingularInt64Field(value: self.source, fieldNumber: 4)
    }
    if !self.memo.isEmpty {
      try visitor.visitSingularStringField(value: self.memo, fieldNumber: 5)
    }
    if !self.privateKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.privateKey, fieldNumber: 6)
    }
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.orderOneof {
    case .tradeOrder?: try {
      guard case .tradeOrder(let v)? = self.orderOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }()
    case .cancelTradeOrder?: try {
      guard case .cancelTradeOrder(let v)? = self.orderOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }()
    case .sendOrder?: try {
      guard case .sendOrder(let v)? = self.orderOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }()
    case .freezeOrder?: try {
      guard case .freezeOrder(let v)? = self.orderOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }()
    case .unfreezeOrder?: try {
      guard case .unfreezeOrder(let v)? = self.orderOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    }()
    case .htltOrder?: try {
      guard case .htltOrder(let v)? = self.orderOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
    }()
    case .depositHtltOrder?: try {
      guard case .depositHtltOrder(let v)? = self.orderOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
    }()
    case .claimHtltOrder?: try {
      guard case .claimHtltOrder(let v)? = self.orderOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
    }()
    case .refundHtltOrder?: try {
      guard case .refundHtltOrder(let v)? = self.orderOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
    }()
    case .issueOrder?: try {
      guard case .issueOrder(let v)? = self.orderOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
    }()
    case .mintOrder?: try {
      guard case .mintOrder(let v)? = self.orderOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
    }()
    case .burnOrder?: try {
      guard case .burnOrder(let v)? = self.orderOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
    }()
    case .transferOutOrder?: try {
      guard case .transferOutOrder(let v)? = self.orderOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
    }()
    case .sideDelegateOrder?: try {
      guard case .sideDelegateOrder(let v)? = self.orderOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
    }()
    case .sideRedelegateOrder?: try {
      guard case .sideRedelegateOrder(let v)? = self.orderOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 22)
    }()
    case .sideUndelegateOrder?: try {
      guard case .sideUndelegateOrder(let v)? = self.orderOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 23)
    }()
    case .timeLockOrder?: try {
      guard case .timeLockOrder(let v)? = self.orderOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 24)
    }()
    case .timeRelockOrder?: try {
      guard case .timeRelockOrder(let v)? = self.orderOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 25)
    }()
    case .timeUnlockOrder?: try {
      guard case .timeUnlockOrder(let v)? = self.orderOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 26)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Binance_Proto_SigningInput, rhs: TW_Binance_Proto_SigningInput) -> Bool {
    if lhs.chainID != rhs.chainID {return false}
    if lhs.accountNumber != rhs.accountNumber {return false}
    if lhs.sequence != rhs.sequence {return false}
    if lhs.source != rhs.source {return false}
    if lhs.memo != rhs.memo {return false}
    if lhs.privateKey != rhs.privateKey {return false}
    if lhs.orderOneof != rhs.orderOneof {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Binance_Proto_SigningOutput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SigningOutput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "encoded"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.encoded) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.encoded.isEmpty {
      try visitor.visitSingularBytesField(value: self.encoded, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Binance_Proto_SigningOutput, rhs: TW_Binance_Proto_SigningOutput) -> Bool {
    if lhs.encoded != rhs.encoded {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
